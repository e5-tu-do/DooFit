/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SinCoeffWithProdAsymm.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::SinCoeffWithProdAsymm)

namespace doofit {
namespace roofit {
namespace functions {

SinCoeffWithProdAsymm::SinCoeffWithProdAsymm() :
  type_coeff_(kCType)
  {
  }

SinCoeffWithProdAsymm::SinCoeffWithProdAsymm(std::string name,
                                   RooAbsReal& _par_S,
                                   RooAbsReal& _par_omega_Bd,
                                   RooAbsReal& _par_omega_Bdb,
                                   RooAbsCategory& _cat_tag,
                                   RooAbsReal& _par_prod_asym,
                                   CoeffType type_coeff) :
  RooAbsReal(name.c_str(), name.c_str()),
  par_S_("par_S_","par_S_",this,_par_S),
  par_omega_Bd_("par_omega_Bd_","par_omega_Bd_",this,_par_omega_Bd),
  par_omega_Bdb_("par_omega_Bdb_","par_omega_Bdb_",this,_par_omega_Bdb),
  cat_tag_("cat_tag_","cat_tag_",this,_cat_tag),
  par_prod_asym_("par_prod_asym_","par_prod_asym_",this,_par_prod_asym),
  type_coeff_(type_coeff)
  {
  }

SinCoeffWithProdAsymm::SinCoeffWithProdAsymm(const SinCoeffWithProdAsymm& other, const char* name) :
  RooAbsReal(other,name),
  par_S_("par_S_",this,other.par_S_),
  par_omega_Bd_("par_omega_Bd_",this,other.par_omega_Bd_),
  par_omega_Bdb_("par_omega_Bdb_",this,other.par_omega_Bdb_),
  cat_tag_("cat_tag_",this,other.cat_tag_),
  par_prod_asym_("par_prod_asym_",this,other.par_prod_asym_),
  type_coeff_(other.type_coeff_)
  {
  }

Int_t SinCoeffWithProdAsymm::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const
{
  if (rangeName){
    std::cout << "rangeName: " << rangeName << std::endl;
    return 0 ;
  } 
  if (matchArgs(allVars, analVars, cat_tag_)) return 1 ;

  return 0;
}


Int_t SinCoeffWithProdAsymm::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  if (normSet) normSet->Print();
  if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  
  if (matchArgs(allVars, analVars, cat_tag_)) return 1;
  
  return 0;
}
Double_t SinCoeffWithProdAsymm::analyticalIntegral(Int_t code, const char* /*rangeName*/) const
{
  // std::cout << "SinCoeffWithProdAsymm::analyticalIntegral(" << code << ", ...): Called." << std::endl;
  switch(code){
    case 0: return SinCoeffWithProdAsymm::evaluate() ;

    case 1: return -2.0*par_S_*type_coeff_*par_prod_asym_ ;

    default: assert(0);
  }

  return 0 ;
}
} // namespace functions
} // namespace roofit
} // namespace doofit

