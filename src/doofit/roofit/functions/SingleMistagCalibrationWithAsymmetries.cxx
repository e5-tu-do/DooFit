/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SingleMistagCalibrationWithAsymmetries.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::SingleMistagCalibrationWithAsymmetries)

namespace doofit {
namespace roofit {
namespace functions {

SingleMistagCalibrationWithAsymmetries::SingleMistagCalibrationWithAsymmetries() :
  type_tag(kBdType)
  {
  }
  
SingleMistagCalibrationWithAsymmetries::SingleMistagCalibrationWithAsymmetries(const char *name, const char *title,
                                                                               RooAbsReal& _par_tag_eta,
                                                                               RooAbsReal& _par_tag_p0,
                                                                               RooAbsReal& _par_tag_p1,
                                                                               RooAbsReal& _par_tag_delta_p0,
                                                                               RooAbsReal& _par_tag_delta_p1,
                                                                               RooAbsReal& _par_tag_meaneta,
                                                                               TagType _type_tag) :
  RooAbsReal(name,title),
  par_tag_eta("par_tag_eta","par_tag_eta",this,_par_tag_eta),
  par_tag_p0("par_tag_p0","par_tag_p0",this,_par_tag_p0),
  par_tag_p1("par_tag_p1","par_tag_p1",this,_par_tag_p1),
  par_tag_delta_p0("par_tag_delta_p0","par_tag_delta_p0",this,_par_tag_delta_p0),
  par_tag_delta_p1("par_tag_delta_p1","par_tag_delta_p1",this,_par_tag_delta_p1),
  par_tag_meaneta("par_tag_meaneta","par_tag_meaneta",this,_par_tag_meaneta),
  type_tag(_type_tag)
  {
  }
  
SingleMistagCalibrationWithAsymmetries::SingleMistagCalibrationWithAsymmetries(const SingleMistagCalibrationWithAsymmetries& other, const char* name) :
  RooAbsReal(other,name),
  par_tag_eta("par_tag_eta",this,other.par_tag_eta),
  par_tag_p0("par_tag_p0",this,other.par_tag_p0),
  par_tag_p1("par_tag_p1",this,other.par_tag_p1),
  par_tag_delta_p0("par_tag_delta_p0",this,other.par_tag_delta_p0),
  par_tag_delta_p1("par_tag_delta_p1",this,other.par_tag_delta_p1),
  par_tag_meaneta("par_tag_meaneta",this,other.par_tag_meaneta),
  type_tag(other.type_tag)
 {
 } 

Int_t SingleMistagCalibrationWithAsymmetries::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
    std::printf("SingleMistagCalibrationWithAsymmetries::getAnalyticalIntegral(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    analVars.Print();
    allVars.Print();
  #endif
    
  return 0;
}
  
Int_t SingleMistagCalibrationWithAsymmetries::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  #ifdef FUNCTIONS_COUNT_CALLS
    std::printf("SingleMistagCalibrationWithAsymmetries::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    analVars.Print();
    allVars.Print();
    if (normSet) normSet->Print();
    if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  #endif
  return 0;
}

Double_t SingleMistagCalibrationWithAsymmetries::analyticalIntegral(Int_t code, const char* /*rangeName*/) const
{
  return 0. ;
}
} // namespace functions
} // namespace roofit
} // namespace doofit
