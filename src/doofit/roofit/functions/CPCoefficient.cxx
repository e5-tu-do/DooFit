/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "CPCoefficient.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(doofit::roofit::functions::CPCoefficient)

namespace doofit {
namespace roofit {
namespace functions {
  
CPCoefficient::CPCoefficient(std::string name,
                             RooAbsReal& _par_cp_coeff,
                             RooAbsCategory& _cat_tag_OS,
                             RooAbsReal& _par_p0_OS,
                             RooAbsReal& _par_p1_OS,
                             RooAbsReal& _par_meaneta_OS,
                             RooAbsReal& _par_eta_OS,
                             RooAbsReal& _par_delta_p0_OS,
                             RooAbsReal& _par_delta_p1_OS,
                             RooAbsCategory& _cat_tag_SS,
                             RooAbsReal& _par_p0_SS,
                             RooAbsReal& _par_p1_SS,
                             RooAbsReal& _par_meaneta_SS,
                             RooAbsReal& _par_eta_SS,
                             RooAbsReal& _par_delta_p0_SS,
                             RooAbsReal& _par_delta_p1_SS,
                             RooAbsReal& _par_prod_asym,
                             CoeffType _type_coeff) :
  RooAbsReal(name.c_str(),name.c_str()),
  par_cp_coeff("par_cp_coeff","par_cp_coeff",this,_par_cp_coeff),
  cat_tag_OS("cat_tag_OS","cat_tag_OS",this,_cat_tag_OS),
  par_p0_OS("par_p0_OS","par_p0_OS",this,_par_p0_OS),
  par_p1_OS("par_p1_OS","par_p1_OS",this,_par_p1_OS),
  par_meaneta_OS("par_meaneta_OS","par_meaneta_OS",this,_par_meaneta_OS),
  par_eta_OS("par_eta_OS","par_eta_OS",this,_par_eta_OS),
  par_delta_p0_OS("par_delta_p0_OS","par_delta_p0_OS",this,_par_delta_p0_OS),
  par_delta_p1_OS("par_delta_p1_OS","par_delta_p1_OS",this,_par_delta_p1_OS),
  cat_tag_SS("cat_tag_SS","cat_tag_SS",this,_cat_tag_SS),
  par_p0_SS("par_p0_SS","par_p0_SS",this,_par_p0_SS),
  par_p1_SS("par_p1_SS","par_p1_SS",this,_par_p1_SS),
  par_meaneta_SS("par_meaneta_SS","par_meaneta_SS",this,_par_meaneta_SS),
  par_eta_SS("par_eta_SS","par_eta_SS",this,_par_eta_SS),
  par_delta_p0_SS("par_delta_p0_SS","par_delta_p0_SS",this,_par_delta_p0_SS),
  par_delta_p1_SS("par_delta_p1_SS","par_delta_p1_SS",this,_par_delta_p1_SS),
  par_prod_asym("par_prod_asym","par_prod_asym",this,_par_prod_asym),
  type_coeff(_type_coeff),
  combo(true)
  {
  }
  
CPCoefficient::CPCoefficient(std::string name,
                             RooAbsReal& _par_cp_coeff,
                             RooAbsCategory& _cat_tag_OS,
                             RooAbsReal& _par_p0_OS,
                             RooAbsReal& _par_p1_OS,
                             RooAbsReal& _par_meaneta_OS,
                             RooAbsReal& _par_eta_OS,
                             RooAbsReal& _par_delta_p0_OS,
                             RooAbsReal& _par_delta_p1_OS,
                             RooAbsReal& _par_prod_asym,
                             CoeffType _type_coeff) :
  RooAbsReal(name.c_str(),name.c_str()),
  par_cp_coeff("par_cp_coeff","par_cp_coeff",this,_par_cp_coeff),
  cat_tag_OS("cat_tag_OS","cat_tag_OS",this,_cat_tag_OS),
  par_p0_OS("par_p0_OS","par_p0_OS",this,_par_p0_OS),
  par_p1_OS("par_p1_OS","par_p1_OS",this,_par_p1_OS),
  par_meaneta_OS("par_meaneta_OS","par_meaneta_OS",this,_par_meaneta_OS),
  par_eta_OS("par_eta_OS","par_eta_OS",this,_par_eta_OS),
  par_delta_p0_OS("par_delta_p0_OS","par_delta_p0_OS",this,_par_delta_p0_OS),
  par_delta_p1_OS("par_delta_p1_OS","par_delta_p1_OS",this,_par_delta_p1_OS),
  par_prod_asym("par_prod_asym","par_prod_asym",this,_par_prod_asym),
  type_coeff(_type_coeff),
  combo(false)
  {
  }

CPCoefficient::CPCoefficient(const CPCoefficient& other, const char* name) :
  RooAbsReal(other,name),
  par_cp_coeff("par_cp_coeff",this,other.par_cp_coeff),
  cat_tag_OS("cat_tag_OS",this,other.cat_tag_OS),
  par_p0_OS("par_p0_OS",this,other.par_p0_OS),
  par_p1_OS("par_p1_OS",this,other.par_p1_OS),
  par_meaneta_OS("par_meaneta_OS",this,other.par_meaneta_OS),
  par_eta_OS("par_eta_OS",this,other.par_eta_OS),
  par_delta_p0_OS("par_delta_p0_OS",this,other.par_delta_p0_OS),
  par_delta_p1_OS("par_delta_p1_OS",this,other.par_delta_p1_OS),
  cat_tag_SS("cat_tag_SS",this,other.cat_tag_SS),
  par_p0_SS("par_p0_SS",this,other.par_p0_SS),
  par_p1_SS("par_p1_SS",this,other.par_p1_SS),
  par_meaneta_SS("par_meaneta_SS",this,other.par_meaneta_SS),
  par_eta_SS("par_eta_SS",this,other.par_eta_SS),
  par_delta_p0_SS("par_delta_p0_SS",this,other.par_delta_p0_SS),
  par_delta_p1_SS("par_delta_p1_SS",this,other.par_delta_p1_SS),
  par_prod_asym("par_prod_asym",this,other.par_prod_asym),
  type_coeff(other.type_coeff),
  combo(other.combo)
  {
  }

Int_t CPCoefficient::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const
{
    // std::printf("CPCoefficient::getAnalyticalIntegral(): In %s line %u (%s): allVars = ", __func__, __LINE__, __FILE__);
    // allVars.Print();
  if (rangeName) return 0 ;
  if (combo) {
    matchArgs(allVars, analVars, cat_tag_OS, cat_tag_SS);
    return 1 ;
  }
  if (matchArgs(allVars, analVars, cat_tag_OS)) {
    return 2 ;
  }
  return 0 ;
}
  
Int_t CPCoefficient::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName) const
{
  // #ifdef FUNCTIONS_COUNT_CALLS
    std::printf("CPCoefficient::getAnalyticalIntegralWN(): In %s line %u (%s): allVars = ",
                __func__, __LINE__, __FILE__);
    analVars.Print();
    allVars.Print();
    if (normSet) normSet->Print();
    if (rangeName) std::cout << "rangeName: " << rangeName << std::endl;
  // #endif
    
  // if (matchArgs(allVars, analVars, cat_tag_OS, cat_tag_SS)) return 1;
    
  return 0;
}

Double_t CPCoefficient::evaluate() const {

    Double_t  firstsummand = 0.;
    Double_t  secondsummand = 0.;
    Double_t  omega_OS_Bd  = par_eta_OS;
    Double_t  omega_OS_Bdb = par_eta_OS;

    if (par_eta_OS < 0.5) {
      if ((par_p0_OS + par_p1_OS*(par_eta_OS - par_meaneta_OS)) > 0.5) {
        omega_OS_Bd  = 0.5;
        omega_OS_Bdb = 0.5;
      }
      else {
        omega_OS_Bd  = par_p0_OS + 0.5*par_delta_p0_OS + (par_p1_OS + 0.5*par_delta_p1_OS)*(par_eta_OS - par_meaneta_OS);
        omega_OS_Bdb = par_p0_OS - 0.5*par_delta_p0_OS + (par_p1_OS - 0.5*par_delta_p1_OS)*(par_eta_OS - par_meaneta_OS);
        if (omega_OS_Bd < 0)  omega_OS_Bd = 0.;
        if (omega_OS_Bdb < 0) omega_OS_Bdb = 0.;
      }
    }


    if (combo) {

      Double_t  omega_SS_Bd  = par_eta_SS;
      Double_t  omega_SS_Bdb = par_eta_SS;

      if (par_eta_SS < 0.5) {
        if ((par_p0_SS + par_p1_SS*(par_eta_SS - par_meaneta_SS)) > 0.5) {
          omega_SS_Bd  = 0.5;
          omega_SS_Bdb = 0.5;
        }
        else{
          omega_SS_Bd  = par_p0_SS + 0.5*par_delta_p0_SS + (par_p1_SS + 0.5*par_delta_p1_SS)*(par_eta_SS - par_meaneta_SS);
          omega_SS_Bdb = par_p0_SS - 0.5*par_delta_p0_SS + (par_p1_SS - 0.5*par_delta_p1_SS)*(par_eta_SS - par_meaneta_SS);
          if (omega_SS_Bd < 0)  omega_SS_Bd = 0.;
          if (omega_SS_Bdb < 0) omega_SS_Bdb = 0.;
        }
      }
    
      firstsummand = 1.0 + cat_tag_OS*cat_tag_SS*(1.0 + 2.0*(omega_OS_Bd*omega_SS_Bd + omega_OS_Bdb*omega_SS_Bdb) - omega_OS_Bd - omega_OS_Bdb - omega_SS_Bd - omega_SS_Bdb) - cat_tag_OS*(omega_OS_Bd - omega_OS_Bdb) - cat_tag_SS*(omega_SS_Bd - omega_SS_Bdb);
      secondsummand = cat_tag_OS*cat_tag_SS*(omega_OS_Bd - omega_OS_Bdb + omega_SS_Bd - omega_SS_Bdb - 2.0*(omega_OS_Bd*omega_SS_Bd - omega_OS_Bdb*omega_SS_Bdb)) - cat_tag_OS*(1.0 - omega_OS_Bd - omega_OS_Bdb) - cat_tag_SS*(1.0 - omega_SS_Bd - omega_SS_Bdb);
    }

    else {

      firstsummand = 1.0 - cat_tag_OS*(omega_OS_Bd - omega_OS_Bdb);
      secondsummand = - cat_tag_OS*(1.0 - omega_OS_Bd - omega_OS_Bdb);
    }

    if (type_coeff == kCosh)
    {
      return firstsummand + par_prod_asym*secondsummand;
    }
    else if (type_coeff == kSin)
    {
      return par_cp_coeff*(par_prod_asym*firstsummand + secondsummand);
    }
    else if (type_coeff == kCos)
    {
      return -1.0*par_cp_coeff*(par_prod_asym*firstsummand + secondsummand);
    }
    else if (type_coeff == kSinh)
    {
      return par_cp_coeff*(firstsummand + par_prod_asym*secondsummand);
    }
    else{
      std::cout  <<  "YOU SHOULD NEVER GET HERE! CPCoefficient could not find a valid coefficient type." <<  std::endl;
      return 0;
    }
}

Double_t CPCoefficient::analyticalIntegral(Int_t code, const char* /*rangeName*/) const {
   
   // std::cout << "CPCoefficient::analyticalIntegral(" << code << ", ...): Called." << std::endl;
    switch(code){
      case 0: return evaluate() ;

      case 1: if (type_coeff == kCosh || type_coeff == kSinh) {
                return 4.0 * par_cp_coeff;
              }
              else if (type_coeff == kSin) {
                return 4.0 * par_cp_coeff * par_prod_asym;
              }
              else if (type_coeff == kCos) {
                return -4.0 * par_cp_coeff * par_prod_asym;
              }

      case 2: if (type_coeff == kCosh || type_coeff == kSinh) {
                return 2.0 * par_cp_coeff;
              }
              else if (type_coeff == kSin) {
                return 2.0 * par_cp_coeff * par_prod_asym;
              }
              else if (type_coeff == kCos) {
                return -2.0 * par_cp_coeff * par_prod_asym;
              }

      default: assert(0);
    }

    return 0 ;
}
} // namespace functions
} // namespace roofit
} // namespace doofit
