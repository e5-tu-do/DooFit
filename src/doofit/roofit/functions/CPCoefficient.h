/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef DOOFIT_ROOFIT_FUNCTIONS_CPCoefficient
#define DOOFIT_ROOFIT_FUNCTIONS_CPCoefficient

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsCategory.h"

namespace doofit {
namespace roofit {
namespace functions {

class CPCoefficient : public RooAbsReal {
public:
  enum CoeffType {
    kCosh = 0,
    kSin  = 1,
    kCos  = 2,
    kSinh = 3
  };
  
  CPCoefficient(std::string name,
                RooAbsReal& _par_cp_coeff,
                RooAbsCategory& _cat_tag_OS,
                RooAbsReal& _par_p0_OS,
                RooAbsReal& _par_p1_OS,
                RooAbsReal& _par_meaneta_OS,
                RooAbsReal& _par_eta_OS,
                RooAbsReal& _par_delta_p0_OS,
                RooAbsReal& _par_delta_p1_OS,
                RooAbsCategory& _cat_tag_SS,
                RooAbsReal& _par_p0_SS,
                RooAbsReal& _par_p1_SS,
                RooAbsReal& _par_meaneta_SS,
                RooAbsReal& _par_eta_SS,
                RooAbsReal& _par_delta_p0_SS,
                RooAbsReal& _par_delta_p1_SS,
                RooAbsReal& _par_prod_asym,
                CoeffType _type_coeff);
  
  CPCoefficient(std::string name,
                RooAbsReal& _par_cp_coeff,
                RooAbsCategory& _cat_tag_OS,
                RooAbsReal& _par_p0_OS,
                RooAbsReal& _par_p1_OS,
                RooAbsReal& _par_meaneta_OS,
                RooAbsReal& _par_eta_OS,
                RooAbsReal& _par_delta_p0_OS,
                RooAbsReal& _par_delta_p1_OS,
                RooAbsReal& _par_prod_asym,
                CoeffType _type_coeff);

  CPCoefficient(const CPCoefficient& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new CPCoefficient(*this,newname); }
  inline virtual ~CPCoefficient() { }

protected:

  RooRealProxy par_cp_coeff ;
  RooCategoryProxy cat_tag_OS ;
  RooRealProxy par_p0_OS ;
  RooRealProxy par_p1_OS ;
  RooRealProxy par_meaneta_OS ;
  RooRealProxy par_eta_OS ;
  RooRealProxy par_delta_p0_OS ;
  RooRealProxy par_delta_p1_OS ;
  RooCategoryProxy cat_tag_SS ;
  RooRealProxy par_p0_SS ;
  RooRealProxy par_p1_SS ;
  RooRealProxy par_meaneta_SS ;
  RooRealProxy par_eta_SS ;
  RooRealProxy par_delta_p0_SS ;
  RooRealProxy par_delta_p1_SS ;
  RooRealProxy par_prod_asym ;
  CoeffType type_coeff ;

  bool combo ;
  
  virtual Double_t evaluate() const;

  virtual Int_t	getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const;
  
  virtual Int_t	getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const;
  
  virtual Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const;
  
private:

  ClassDef(CPCoefficient,1) // CP Coefficient
};
} // namespace functions
} // namespace roofit
} // namespace doofit

#endif
